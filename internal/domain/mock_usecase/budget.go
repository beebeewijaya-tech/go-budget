// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/beebeewijaya-tech/go-budget/internal/domain (interfaces: BudgetUsecase)

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	context "context"
	reflect "reflect"

	domain "github.com/beebeewijaya-tech/go-budget/internal/domain"
	gomock "github.com/golang/mock/gomock"
)

// MockBudgetUsecase is a mock of BudgetUsecase interface.
type MockBudgetUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockBudgetUsecaseMockRecorder
}

// MockBudgetUsecaseMockRecorder is the mock recorder for MockBudgetUsecase.
type MockBudgetUsecaseMockRecorder struct {
	mock *MockBudgetUsecase
}

// NewMockBudgetUsecase creates a new mock instance.
func NewMockBudgetUsecase(ctrl *gomock.Controller) *MockBudgetUsecase {
	mock := &MockBudgetUsecase{ctrl: ctrl}
	mock.recorder = &MockBudgetUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBudgetUsecase) EXPECT() *MockBudgetUsecaseMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockBudgetUsecase) Create(arg0 context.Context, arg1 domain.Budget) (domain.Budget, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(domain.Budget)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockBudgetUsecaseMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockBudgetUsecase)(nil).Create), arg0, arg1)
}

// DeleteByID mocks base method.
func (m *MockBudgetUsecase) DeleteByID(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByID", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByID indicates an expected call of DeleteByID.
func (mr *MockBudgetUsecaseMockRecorder) DeleteByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByID", reflect.TypeOf((*MockBudgetUsecase)(nil).DeleteByID), arg0, arg1)
}

// GetByID mocks base method.
func (m *MockBudgetUsecase) GetByID(arg0 context.Context, arg1 string) (domain.Budget, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", arg0, arg1)
	ret0, _ := ret[0].(domain.Budget)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockBudgetUsecaseMockRecorder) GetByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockBudgetUsecase)(nil).GetByID), arg0, arg1)
}

// List mocks base method.
func (m *MockBudgetUsecase) List(arg0 context.Context, arg1 string, arg2, arg3 int) ([]domain.Budget, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]domain.Budget)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockBudgetUsecaseMockRecorder) List(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockBudgetUsecase)(nil).List), arg0, arg1, arg2, arg3)
}
