// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/beebeewijaya-tech/go-budget/internal/domain (interfaces: BudgetRepository)

// Package mock_repo is a generated GoMock package.
package mock_repo

import (
	context "context"
	reflect "reflect"

	domain "github.com/beebeewijaya-tech/go-budget/internal/domain"
	gomock "github.com/golang/mock/gomock"
)

// MockBudgetRepository is a mock of BudgetRepository interface.
type MockBudgetRepository struct {
	ctrl     *gomock.Controller
	recorder *MockBudgetRepositoryMockRecorder
}

// MockBudgetRepositoryMockRecorder is the mock recorder for MockBudgetRepository.
type MockBudgetRepositoryMockRecorder struct {
	mock *MockBudgetRepository
}

// NewMockBudgetRepository creates a new mock instance.
func NewMockBudgetRepository(ctrl *gomock.Controller) *MockBudgetRepository {
	mock := &MockBudgetRepository{ctrl: ctrl}
	mock.recorder = &MockBudgetRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBudgetRepository) EXPECT() *MockBudgetRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockBudgetRepository) Create(arg0 context.Context, arg1 domain.Budget) (domain.Budget, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(domain.Budget)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockBudgetRepositoryMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockBudgetRepository)(nil).Create), arg0, arg1)
}

// Delete mocks base method.
func (m *MockBudgetRepository) Delete(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockBudgetRepositoryMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockBudgetRepository)(nil).Delete), arg0, arg1)
}

// Get mocks base method.
func (m *MockBudgetRepository) Get(arg0 context.Context, arg1 string) (domain.Budget, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(domain.Budget)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockBudgetRepositoryMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockBudgetRepository)(nil).Get), arg0, arg1)
}

// List mocks base method.
func (m *MockBudgetRepository) List(arg0 context.Context, arg1 string, arg2, arg3 int) ([]domain.Budget, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]domain.Budget)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockBudgetRepositoryMockRecorder) List(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockBudgetRepository)(nil).List), arg0, arg1, arg2, arg3)
}

// Update mocks base method.
func (m *MockBudgetRepository) Update(arg0 context.Context, arg1 domain.Budget) (domain.Budget, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(domain.Budget)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockBudgetRepositoryMockRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockBudgetRepository)(nil).Update), arg0, arg1)
}
